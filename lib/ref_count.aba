struct Node<T> {
    item: T;
    //next: Node<T>; //recursive embedding of structures. 
    next: *Node<T>; //reference for next node
};

struct Ref<T> (     // T: type being malloced
    ref:   &void;   // the pointer returned by malloc() of type &T (possibly unnecessary)
    _n:    uint;    // size of allocation 
    to:    uint;    // # of references to ref, updated every time a new reference is made
    //from:  uint;  // # of references contained in type T: Ref<*char[20]>.from = 20, Ref<Node<T>>.from = 1 
    _ref_: [T._ref: *Ref];    // internal references malloc(from * sizeof(*void))
    ) {
    .clone -> ._clone {
        for r in _ref_
            r.to++;
    }
    .deref {
        if(!--to) {
            for r in _ref_ {
                if !(--r.to) {
                    r.deref();
                }
            }
            heap.free(ref);
        }
    }
}



