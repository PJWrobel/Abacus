struct str (
    
  ){
    
}

struct String (
        vec: Vec<u8>;
    ) {
    .index_of(key: char) -> int {
        for (i,c) in s {
            if(c == key) {
                -> i
            }
        }
        -> 0
    }
    .split(d: char) -> Vec<String> {
        
    }
    .push(c: char) {
        vec.pop().;
        vec.push(c).push('\0');
    }
    .append(s: &str) {
        vec.pop();
        vec += str!;
        vec.push('\0');
    }
}

def Vec<T> (
        a:   &[]<T>, //*[]<T>._n is built in?
        a_n: int,
        n:   int
    ) {
    .push(item: T) {
        if(a_n == n) {
            a = malloc(a._n); //pointer reassignment, 
        }
    }
}

println("Hello World!".toString.split(' ').iter.push('\n')); 
Hello
World!


