Abacus: a low-level language built for the modern age of productivity and ease of use

- Intuitive compilation to C
- Methods
- modern types: algebraic (tuples), iterators, first class functions
- built-in strings
- generics, traits
- safe memory management, implicit free for certain patterns, GC when patrterns can not be proven, smart pointers for -GC:none, raw pointers available and treated same but without memory checks
- intuitive error handling and default null safety, strongly based off rust: Option<>, Result, Panic(), Expect(), "?" features
- easy C library imports, hopefully dynamic linking implemented
- syntax based off Rust, C, Go, Nim

Features ranging from most important to nice-to-haves
i
1. Structures: easily translatable to C, '.' implilcitly representing "this".

    struct User (
        active: bool,          rust-like syntax, parentesis over brackets for field definitions
        username: String,      shallow and deep copies implementable
        email: String,         
        sign_in_count: u64,    directly translates to C
    ){
        .new() -> User {...}   methods implemented with '.' prefix
        .update() {...}
        .FREE() {...}          language defined functions in UPPERCASE
        .TO<Str> {...}         called implicitly when used in print functions
        .TO<Str> {...}          debugging tools built in
    }
2.Generics: 
    add(a: T, b: T) -> T { implicit trait use
        -> a + b;
    }
